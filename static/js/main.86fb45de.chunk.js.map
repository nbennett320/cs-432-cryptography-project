{"version":3,"sources":["components/NavigationBar.js","components/ImageDetails.js","views/upload-file/UploadButton.js","views/upload-file/UploadFile.js","views/file-options/FileOptions.js","views/encode-file/TextArea.js","util/util.js","util/SteganographyEncoder.js","views/encode-file/EncodeFile.js","views/decode-file/DecodedTextSection.js","util/SteganographyDecoder.js","views/decode-file/DecodeFile.js","util/Pixel.js","util/ImageParser.js","App.js","index.js"],"names":["styles","navbar","backgroundColor","NavigationBar","props","Navbar","expand","bg","style","Brand","href","Nav","className","Link","onClick","navigateHome","ImageDetails","Card","Title","image","getName","Text","getHeight","getWidth","getFileType","getFileSize","children","UploadButton","fileInput","React","useRef","Button","current","click","variant","type","ref","onChange","e","file","target","files","handleFileUpload","display","card","width","marginTop","alignSelf","UploadFile","Body","console","log","setView","loadFile","cardImg","objectFit","overflow","ImageOptions","useState","isLoaded","setLoaded","fullImage","setFullImage","useEffect","parse","then","Img","src","getUrl","ButtonGroup","container","margin","TextArea","InputGroup","Prepend","FormControl","setMessage","value","as","aria-label","binaryToAsciiChar","bin","ch","String","fromCharCode","parseInt","SteganographyEncoder","message","encode","a","Promise","res","str","imageData","getPixelBuffer","colorData","data","messageBin","Array","from","reduce","acc","char","concat","charCodeAt","toString","map","repeat","length","join","cursor","i","j","setPixelBuffer","url","this","bold","fontWeight","EncodeFile","setSrc","mode","setMode","handleEncode","encoder","anchor","document","createElement","download","handleDownload","padding","code","DecodedTextSection","SteganographyDecoder","decode","charBin","test","warn","trim","alert","DecodeFile","showAlert","setShowAlert","handleDecode","decoder","msg","Alert","show","navigator","clipboard","writeText","setTimeout","Pixel","rgba","r","undefined","g","b","hex","toPixel","hexR","hexG","hexB","dec","hexStr","ImageParser","URL","createObjectURL","height","OffscreenCanvas","getContext","drawImage","error","getResolution","name","exec","bytes","size","kb","mb","getPixel","x","y","getImageData","pixelData","putImageData","convertToBlob","blob","_getCanvas","_getCanvasContext","img","Image","onload","imageParser","App","view","FileOptions","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.86fb45de.chunk.js","sourcesContent":["import React from 'react'\nimport { \n  Navbar, \n  Nav, \n  // NavDropdown, \n} from 'react-bootstrap'\n\nconst NavigationBar = props => {\n  return(\n    <Navbar expand=\"lg\" bg=\"light\" style={styles.navbar}>\n      <Navbar.Brand href=\"/\">\n        CS 432 Cryptography Project\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <Nav.Link onClick={props.navigateHome}>Home</Nav.Link>\n        <Nav.Link href=\"https://github.com/nbennett320/cs-432-cryptography-project\">About</Nav.Link>\n      </Nav>\n    </Navbar>\n  )\n}\n\nconst styles = {\n  navbar: {\n    backgroundColor: '#f8f9fa'\n  }\n}\n\nexport default NavigationBar","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nconst ImageDetails = props => {\n  return(\n    <>\n      <Card.Title>Filename: {props.image.getName()}</Card.Title>\n      <Card.Text>\n        Image resolution: {props.image.getHeight()} &times; \n        {props.image.getWidth()} pixels\n        <br/>\n        File type: {props.image.getFileType()}\n        <br/>\n        Size: {props.image.getFileSize()}\n        <br/>\n        {/* append any children */}\n        {props.children}\n      </Card.Text>\n    </>\n  )\n}\n\nexport default ImageDetails","import React from 'react'\nimport { Button } from 'react-bootstrap'\n\nconst UploadButton = props => {\n  const fileInput = React.useRef()\n  \n  // handle upload button click\n  const handleClick = () => {\n    fileInput.current.click()\n  }\n\n  // handle when user uploads new file\n  const handleChange = e => {\n    const file = e.target.files[0]\n    props.handleFileUpload(file)\n  }\n\n  return (\n    <Button\n      onClick={handleClick}\n      variant=\"primary\"\n    >\n      Upload\n      <input \n        type=\"file\" \n        ref={fileInput}\n        onChange={handleChange}\n        style={{display: 'none'}}\n      />\n    </Button>\n  )\n}\n\nexport default UploadButton","import React from 'react'\nimport { Card } from 'react-bootstrap'\nimport UploadButton from './UploadButton'\n\nconst UploadFile = props => {\n  const handleFileUpload = file => {\n    if(file) {\n      console.log(\"filetype js:\", typeof file)\n      props.setView('file-options')\n      props.image.loadFile(file)\n    }\n  }\n\n  return (\n    <div className=\"view\">\n      <Card style={styles.card}>\n        <Card.Body>\n          <Card.Title>Select file</Card.Title>\n          <Card.Text>\n            Upload a photo or audio file you wish to encode with a message\n            or extract a message from.\n          </Card.Text>\n          <UploadButton handleFileUpload={handleFileUpload} />\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nconst styles = {\n  card: {\n    width: '18rem',\n    marginTop: '9rem',\n    alignSelf: 'center'\n  }\n}\n\nexport default UploadFile","import React from 'react'\nimport { \n  Card, \n  Button,\n  ButtonGroup\n} from 'react-bootstrap'\nimport '../../styles/transitions.css'\n\nconst ImageOptions = props => {\n  const [isLoaded, setLoaded] = React.useState(false)\n  const [fullImage, setFullImage] = React.useState(false)\n  \n  React.useEffect(() => {\n    props.image.parse().then(() => {\n      setLoaded(true)\n    }, [isLoaded])\n  })\n\n  return (\n    <div className=\"view\">\n      <Card style={styles.card}>\n        <Card.Img \n          className={[\n            \"expand-transition\", \n            fullImage ? \"image-preview image-preview--expanded\" : \"image-preview\"\n          ]}\n          src={props.image.getUrl()}\n          style={styles.cardImg}\n          variant=\"top\"\n        />\n        <Card.Body>\n          <Card.Title>Filename: {props.image.getName()}</Card.Title>\n          <Card.Text>\n            Image resolution: {props.image.getHeight()} &times; \n            {props.image.getWidth()} pixels\n            <br/>\n            File type: {props.image.getFileType()}\n            <br/>\n            Size: {props.image.getFileSize()}\n            <br/>\n          </Card.Text>\n          <ButtonGroup>\n            <Button\n              onClick={() => {props.setView('encode-file')}}\n              variant=\"outline-primary\"\n            >\n              Encode a message\n            </Button>\n            <Button\n              onClick={() => {props.setView('decode-file')}}\n              variant=\"outline-primary\"\n            >\n              Decode from media\n            </Button>\n            <Button\n              onClick={() => setFullImage(!fullImage)}\n              variant=\"outline-primary\"\n            >\n              { fullImage ? 'Hide' : 'Show' } Full Image\n            </Button>\n            {/* <Button\n              onClick={() => {}}\n              variant=\"outline-primary\"\n            >\n              Restart\n            </Button> */}\n          </ButtonGroup>\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nconst styles = {\n  card: {\n    width: '36rem',\n    marginTop: '9rem',\n    alignSelf: 'center',\n  },\n  cardImg: {\n    width: '100%',\n    alignSelf: 'center',\n    objectFit: 'cover',\n    overflow: 'hidden',\n  }\n}\n\nexport default ImageOptions","import React from 'react'\nimport { InputGroup, FormControl } from 'react-bootstrap'\n\nconst TextArea = props => {\n  const handleChange = e => props.setMessage(e.target.value)\n\n  return (\n    <div style={styles.container}>\n      <InputGroup>\n        <InputGroup.Prepend>\n          <InputGroup.Text>Message:</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl \n          onChange={handleChange}\n          as=\"textarea\" \n          aria-label=\"With textarea\" \n        />\n      </InputGroup>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    margin: '12px 0'\n  }\n}\n\nexport default TextArea","// util functions\n\nexport const range = (start, end) => {\n  const length = end - start\n  return Array.from({ length }, (_, i) => start + i)\n}\n\nexport const stringToBinary = str => {\n  return Array\n    .from(str)\n    .reduce((acc, char) => acc.concat(char.charCodeAt().toString(2)), [])\n    .map(bin => '0'.repeat(8 - bin.length) + bin )\n    .join('')\n}\n\nexport const binaryToAsciiChar = bin => {\n  const ch = String.fromCharCode(parseInt(bin, 2))\n  console.log(\"ch\",ch)\n  return ch\n}\n\nexport const isAscii = str => {\n  return /^[ -~]+$/.test(str)\n}\n","import { stringToBinary } from './util'\n\n/**\n * \n */\nclass SteganographyEncoder {\n  /**\n   * Initialize new encoder with prepared image parser \n   * and a message to encode\n   * @param {ImageParser} image \n   * @param {String} message \n   */\n  constructor(image, message) {\n    this.#_imageParser = image\n    this.#_message = message\n  } \n\n  /**\n   * Encode the message\n   */\n  encode = async () => {\n    return new Promise(res => {\n      const imageData = this.#_imageParser.getPixelBuffer()\n      const colorData = imageData.data\n      const messageBin = stringToBinary(this.#_message)\n  \n      let cursor = 0\n      for(let i = 0, j = 0; i < colorData.length; i += 4, j++) {\n        if(colorData[i + 2] % 2 === 0) {\n          if(parseInt(messageBin[cursor]) === 1) {\n            colorData[i + 2] += 1\n          }\n        } else {\n          if(parseInt(messageBin[cursor]) === 0) {\n            colorData[i + 2] -= 1\n          }\n        }\n        cursor += 1\n        if(cursor >= messageBin.length) break\n      }\n      this.#_imageParser.setPixelBuffer(imageData).then(url => {\n        res(url)\n      })\n    })\n  }\n\n  // private\n\n  \n  #_isValidLength = () => {}\n\n  #_imageParser\n\n  #_message\n}\n\nexport default SteganographyEncoder\n","import React from 'react'\nimport { \n  Card, \n  Button,\n  ButtonGroup\n} from 'react-bootstrap'\nimport { ImageDetails } from '../../components'\nimport TextArea from './TextArea'\nimport SteganographyEncoder from '../../util/SteganographyEncoder'\n\nconst EncodeFile = props => {\n  const [message, setMessage] = React.useState(\"\")\n  const [src, setSrc] = React.useState(props.image.getUrl())\n  const [mode, setMode] = React.useState('default')\n  \n  const handleEncode = async (image, message) => {\n    const encoder = new SteganographyEncoder(image, message)\n    await encoder.encode().then(url => {\n      setSrc(url)\n      console.log(\"renewed url:\", url)\n      console.log(\"renewed src:\", src)\n      setMode('has-encoded')\n    })\n  }\n\n  const handleDownload = () => {\n    const anchor = document.createElement('a')\n    anchor.download = `encoded_${props.image.getName()}`\n    anchor.href = src\n    anchor.click()\n  }\n  \n  return (\n    <div className=\"view\">\n      <Card style={styles.card}>\n        <Card.Img \n          className={[\n            \"expand-transition\", \n            \"image-preview image-preview--expanded\"\n          ]}\n          src={src}\n          style={styles.cardImg}\n          variant=\"top\"\n        />\n        <Card.Body>\n          <ImageDetails image={props.image}>\n            {mode === 'has-encoded' && <span>\n              <b style={styles.bold}>Message encoded!</b> Click the button below to download your steganographic photo.\n            </span>}\n          </ImageDetails>\n          <TextArea setMessage={setMessage} />\n          {mode === 'default' && <ButtonGroup>\n            <Button\n              onClick={() => handleEncode(props.image, message)}\n              variant=\"outline-primary\"\n            >\n              Encode\n            </Button>\n            <Button\n              onClick={() => {}}\n              variant=\"outline-secondary\"\n            >\n              Back\n            </Button>\n          </ButtonGroup>}\n          {mode === 'has-encoded' && <ButtonGroup>\n            <Button\n              onClick={() => handleDownload()}\n              variant=\"outline-primary\"\n            >\n              Download file\n            </Button>\n            <Button\n              onClick={() => {}}\n              variant=\"outline-secondary\"\n            >\n              Back\n            </Button>\n          </ButtonGroup>}\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nconst styles = {\n  card: {\n    width: '36rem',\n    marginTop: '9rem',\n    alignSelf: 'center',\n  },\n  cardImg: {\n    width: '100%',\n    alignSelf: 'center',\n    objectFit: 'cover',\n    overflow: 'hidden',\n  },\n  bold: {\n    fontWeight: '500'\n  }\n}\n\nexport default EncodeFile","import React from 'react'\nimport { Card } from 'react-bootstrap'\n\nconst DecodedTextSection = props => {\n  return (\n    <Card.Text style={styles.container}>\n      <code style={styles.code}>\n        {props.message}\n      </code>\n    </Card.Text>\n  )\n}\n\nconst styles = {\n  container: {\n    padding: '8px',\n    backgroundColor: '#f8f9fa'\n  },\n  code: {\n    backgroundColor: '#f8f9fa'\n  }\n}\n\nexport default DecodedTextSection","import { \n  binaryToAsciiChar,\n  isAscii\n} from './util'\n\n/**\n * \n */\nclass SteganographyDecoder {\n  /**\n   * Initialize new encoder with prepared image parser \n   * and a message to encode\n   * @param {ImageParser} image \n   */\n  constructor(image) {\n    this.#_imageParser = image\n  } \n\n  /**\n   * Encode the message\n   */\n  decode = async () => {\n    return new Promise(res => {\n      const imageData = this.#_imageParser.getPixelBuffer()\n      const colorData = imageData.data\n      \n      let cursor = 0\n      let charBin = \"\"\n      let message = \"\"\n      for(let i = 0, j = 0; i < colorData.length; i += 4, j++) {\n        let data = [\n          colorData[i], \n          colorData[i + 1], \n          colorData[i + 2], \n        ]\n        if((i > 0) && (cursor % 8 === 0)) {\n          const ch = binaryToAsciiChar(charBin)\n          if(isAscii(ch)) {\n            message += ch\n            charBin = \"\"\n          } else {\n            console.warn(`Non-Ascii char found: 0b${charBin}`)\n            break\n          }\n        } else {\n          charBin += data[2] % 2\n        }\n        cursor += 1\n      }\n      return res(message.trim())\n    })\n  }\n\n  // private\n  \n  #_imageParser\n\n}\n\nexport default SteganographyDecoder","import React from 'react'\nimport { \n  Card, \n  Button,\n  ButtonGroup,\n  Alert\n} from 'react-bootstrap'\nimport { ImageDetails } from '../../components'\nimport DecodedTextSection from './DecodedTextSection'\nimport SteganographyDecoder from '../../util/SteganographyDecoder'\n\nconst DecodeFile = props => {\n  const [mode, setMode] = React.useState('default')\n  const [message, setMessage] = React.useState()\n  const [showAlert, setShowAlert] = React.useState(false)\n\n  const handleDecode = async (image) => {\n    const decoder = new SteganographyDecoder(image)\n    await decoder.decode().then(msg => {\n      console.log('recieved:',msg)\n      setMessage(msg)\n      setMode('has-decoded')\n    })\n  }\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(message).then(() => {\n      setShowAlert(true)\n      setTimeout(() => {\n        setShowAlert(false)\n      }, 6000)\n    })\n  }\n\n  return (\n    <div className=\"view\">\n      <Card style={styles.card}>\n        <Card.Img \n          className={[\n            \"expand-transition\", \n            \"image-preview image-preview--expanded\"\n          ]}\n          src={props.image.getUrl()}\n          style={styles.cardImg}\n          variant=\"top\"\n        />\n        <Card.Body>\n          <ImageDetails image={props.image}>\n            {mode === 'has-decoded' && <span>\n            <b style={styles.bold}>Message decoded!</b> Click the button below to copy the message to your clipboard.\n            </span>}\n          </ImageDetails>\n          {mode === 'has-decoded' && <DecodedTextSection message={message} />}\n          <Alert \n            show={showAlert}\n            variant=\"primary\"\n            onClick={() => setShowAlert(false)}\n            style={styles.alert}\n          >\n            Copied to clipboard!\n          </Alert>\n          {mode === 'default' && <ButtonGroup>\n            <Button\n              onClick={() => handleDecode(props.image)}\n              variant=\"outline-primary\"\n            >\n              Decode\n            </Button>\n            <Button\n              onClick={() => {}}\n              variant=\"outline-secondary\"\n            >\n              Back\n            </Button>\n          </ButtonGroup>}\n          {mode === 'has-decoded' && <ButtonGroup>\n            <Button\n              onClick={() => {handleCopy()}}\n              variant=\"outline-primary\"\n            >\n              Copy to clipboard\n            </Button>\n            <Button\n              onClick={() => {}}\n              variant=\"outline-secondary\"\n            >\n              Back\n            </Button>\n          </ButtonGroup>}\n        </Card.Body>\n      </Card>\n    </div>\n  )\n}\n\nconst styles = {\n  card: {\n    width: '36rem',\n    marginTop: '9rem',\n    alignSelf: 'center',\n  },\n  cardImg: {\n    width: '100%',\n    alignSelf: 'center',\n    objectFit: 'cover',\n    overflow: 'hidden',\n  },\n  bold: {\n    fontWeight: '500'\n  },\n  alert: {\n    cursor: 'pointer'\n  }\n}\n\nexport default DecodeFile","/**\n * @class\n * Define a pixel class with rgba values and hex value\n */\nclass Pixel {\n  /**\n   * Set rgba and hex values\n   * @param {Object} data object containing rgba values\n   */\n  constructor(data) {\n    if(data) {\n      this.rgba.r = data[0]\n      this.rgba.g = data[1]\n      this.rgba.b = data[2]\n      this.rgba.a = data[3] / 255\n      const hexR = this.#_dec2HexCSubstr(data[0])\n      const hexG = this.#_dec2HexCSubstr(data[1])\n      const hexB = this.#_dec2HexCSubstr(data[2])\n      this.hex = '#' + hexR + hexG + hexB\n    }\n  }\n\n  /**\n   * Object containing RGBA values of a pixel color\n   * @property {Object} rgba\n   */\n  rgba = {\n    r: undefined, \n    g: undefined, \n    b: undefined, \n    a: undefined \n  }\n\n  /**\n   * Representation of pixel color in hex color code \n   * @member {String} hex\n   */\n  hex = \"\"\n\n  toPixel = data => {\n    this.rgba.r = data[0]\n    this.rgba.g = data[1]\n    this.rgba.b = data[2]\n    this.rgba.a = data[3] / 255\n    const hexR = this.#_dec2HexCSubstr(data[0])\n    const hexG = this.#_dec2HexCSubstr(data[1])\n    const hexB = this.#_dec2HexCSubstr(data[2])\n    this.hex = '#' + hexR + hexG + hexB\n    return {\n      rgba: this.rgba,\n      hex: this.hex\n    }\n  }\n\n  // private\n\n  /**\n   * Convert decimal integers to a 2-character string, which \n   * is a substring of the color hex value\n   * @param {Number} dec base 10 number\n   * @returns {String} string of hex number\n   */\n  #_dec2HexCSubstr = dec => {\n    const hexStr = dec.toString(16)\n    if(hexStr.length > 1) {\n      return hexStr\n    } else {\n      return `0${hexStr}`\n    }\n  }\n}\n\nexport default Pixel\n","import Pixel from './Pixel'\n\n/**\n * @class\n * Used for parsing images, especially getting and\n * manipulating pixel data\n */\nclass ImageParser {\n  /**\n   * Load a file (but don't parse yet)\n   * @param {Object} file File to load\n   */\n  constructor(file) {\n    this.#_imageHasLoaded = false\n    if(file) {\n      if(this.#_validateImage(file)) {\n        this.#_isValidFile = true\n        this.#_data = file\n        this.#_url = URL.createObjectURL(file)\n      } else {\n        this.#_isValidFile = false\n      }\n    }\n  }\n\n  /**\n   * Load a file (for cases where caller didn't construct\n   * with a file... wish I could just use a separate constructor\n   * like in C++...)\n   */\n  loadFile = file => {\n    if(this.#_validateImage(file)) {\n      this.#_isValidFile = true\n      this.#_data = file\n      this.#_url = URL.createObjectURL(file)\n      console.log(\"loaded\")\n    } else {\n      console.warn(\"Error loading file: \", file)\n    }\n  }\n\n  /**\n   * Create and parse image canvas data if file is valid\n   */ \n  parse = async () => {\n    if(this.#_imageHasLoaded) {\n      // image was already parsed\n      console.log(\"Image was already parsed: \", this)\n    } else if(this.#_isValidFile) {\n      await this.#_loadImage().then(res => {\n        this.#_img = res\n        this.#_height = res.height\n        this.#_width = res.width\n        this.#_canvas = new OffscreenCanvas(res.width, res.height)\n        this.#_ctx = this.#_canvas.getContext('2d')\n        this.#_ctx.drawImage(this.#_img, 0, 0)\n        this.#_imageHasLoaded = true\n      })\n    } else {\n      console.error(\"Invalid file type: \", this.#_data.type)\n    }\n  }\n\n  /**\n   * It does what you think\n   * @returns {Number} n pixels\n   */\n  getHeight = () => {\n    if(this.#_isValidFile) {\n      return this.#_height\n    }\n  }\n\n  /**\n   * It does what you think\n   * @returns {Number} n pixels\n   */\n  getWidth = () => {\n    if(this.#_isValidFile) {\n      return this.#_width\n    }\n  }\n\n  /**\n   * Return height and width\n   * @returns {Array} [height, width]\n   */\n  getResolution = () => {\n    if(this.#_isValidFile) {\n      return [this.#_height, this.#_width]\n    }\n  }\n\n  /**\n   * Get the name of the uploaded file\n   * @returns {String} filename\n   */\n  getName = () => {\n    if(this.#_isValidFile) {\n      return this.#_data.name\n    }\n  }\n\n  /**\n   * Get the url representing the image\n   * @returns {String} url\n   */\n  getUrl = () => {\n    if(this.#_isValidFile) {\n      return this.#_url\n    }\n  }\n\n  /**\n   * Get the file extension of the image\n   * @returns {String} file extension\n   */\n  getFileType = () => {\n    if(this.#_isValidFile) {\n      const matches = /^image\\/(png|jpe?g|gif)$/.exec(this.#_data.type)\n      const ext = matches[1]\n      return ext\n    }\n  }\n\n  /**\n   * Get human-readable file sizeq\n   * @returns {String} file size\n   */\n  getFileSize = () => {\n    if(this.#_isValidFile) {\n      const bytes = this.#_data.size\n      const kb = bytes / 1000\n      const mb = bytes / 1000000\n      if(mb > 1) {\n        return `${mb} Mb`\n      } else if(kb > 1) {\n        return `${kb} Kb`\n      } else {\n        return `${bytes} B`\n      }\n    }\n  }\n\n  /**\n   * Get the pixel at the position (x, y)\n   * @param {Number} x x coord starting from top left of the image\n   * @param {Number} y y coord starting from top left of the image\n   * @returns {Pixel} returns Pixel class at x y position\n   */\n  getPixel = (x, y) => {\n    if(this.#_isValidFile && this.#_imageHasLoaded) {\n      if(this.#_isValidRange(x,y)) {\n        const { data } = this.#_ctx.getImageData(x, y, 1, 1)\n        return new Pixel(data)\n      } else {\n        console.error(`Not a valid pixel; (${x}, ${y}) is not in range of (${this.#_width}, ${this.#_height})`)\n      }\n    } else if(!this.#_imageHasLoaded) {\n      console.error(`Image has not loaded, call ImageParser.parse() first.`)\n    }\n  }\n\n  /**\n   * Get the image as an array of pixels\n   * @returns {CanvasImageData} returns array of pixel data\n   */\n   getPixelBuffer = () => {\n    if(this.#_isValidFile && this.#_imageHasLoaded) {\n      return this.#_ctx.getImageData(0, 0, this.#_width, this.#_height)\n    } else if(!this.#_imageHasLoaded) {\n      console.error(`Image has not loaded, call ImageParser.parse() first.`)\n    }\n  }\n\n  /**\n   * Replace modified Pixel Buffer\n   * @param {CanvasImageData} pixelData \n   */\n  setPixelBuffer = async pixelData => {\n    return new Promise(res => {\n      if(this.#_isValidFile && this.#_imageHasLoaded) {\n        this.#_ctx.putImageData(pixelData, 0, 0)\n        this.#_canvas[\n          this.#_canvas.convertToBlob \n            ? 'convertToBlob' \n            : 'toBlob'\n        ]().then(blob => {\n          this.#_url = URL.createObjectURL(blob)\n          res(this.#_url)\n          console.log(\"new url set (parser)\", this.#_url)\n          })\n      } else if(!this.#_imageHasLoaded) {\n        console.error(`Image has not loaded, call ImageParser.parse() first.`)\n      }\n    })\n  }\n\n  /**\n   * Returns offscreen canvas object\n   * @returns {HTMLCanvasElement} canvas object\n   */\n  _getCanvas = () => this.#_canvas\n\n  /**\n   * Get canvas context\n   * @returns {CanvasRenderingContext2D} canvas context object\n   */\n  _getCanvasContext = () => this.#_ctx\n\n  /**\n   * Return if image has loaded\n   * @returns {Boolean} True if loaded\n   */\n  isLoaded = () => this.#_imageHasLoaded\n\n  // private members & methods\n\n  /**\n   * Load the image\n   * @returns {Promise} promise that resolves after the image loads\n   */\n  #_loadImage = () => new Promise (res => {\n    const img = new Image()\n    img.src = this.#_url\n    img.onload = () => res(img)\n  })\n  \n  /**\n   * Check if image is a valid file type\n   * @param {Object} file file object from uploading\n   * @returns {Boolean} is valid if true\n   */\n  #_validateImage = file => /^image\\/(png|jpe?g|gif)$/.test(file.type)\n\n  /**\n   * Check if pixel is within canvas boundaries\n   * @param {Number} x x position\n   * @param {Number} y y position\n   * @returns {Boolean} is in range if true\n   */\n  #_isValidRange = (x, y) => (0 <= y <= this.#_height) && (0 <= x <= this.#_width)\n\n  #_imageHasLoaded\n  #_isValidFile\n  #_data\n  #_url\n  #_img\n  #_height\n  #_width\n  #_canvas\n  #_ctx\n}\n\nexport default ImageParser\n","import React from 'react'\nimport { NavigationBar } from './components'\nimport { \n  UploadFile,\n  FileOptions,\n  EncodeFile,\n  DecodeFile\n} from './views'\nimport ImageParser from './util/ImageParser'\nimport './styles/App.css'\n\nconst imageParser = new ImageParser()\n\nconst App = () => {\n  // poor man's view router\n  const [view, setView] = React.useState()\n\n  React.useEffect(() => {\n    console.log('view changed: ', view)\n  }, [view])\n\n  return (\n    <div className=\"app\">\n      <NavigationBar \n        navigateHome={() => setView('upload-file')}\n      />\n      {view === 'upload-file' && <UploadFile \n        setView={setView} \n        image={imageParser}\n      />}\n      {view === 'file-options' && <FileOptions \n        setView={setView} \n        image={imageParser}\n      />}\n      {view === 'encode-file' && <EncodeFile \n        setView={setView} \n        image={imageParser}\n      />}\n      {view === 'decode-file' && <DecodeFile \n        setView={setView} \n        image={imageParser}\n      />}\n      {!view && <UploadFile \n        setView={setView} \n        image={imageParser}\n      />}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './styles/index.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}